create database products ;

select * from products 
where category = "Plus" ;



# I have directly imported the dataset from scv to table using mysql workbench 










# code of setting api for databse


from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError

app = Flask(__name__)

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:Ybi@$!15drt6749@localhost/products'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Disable modification tracking
db = SQLAlchemy(app)

# Product model
class Product(db.Model):
    __tablename__ = 'products'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    price = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'price': self.price
        }


@app.route('/api/products', methods=['GET'])
def get_products():
    try:
        # Get pagination parameters from query string (default to page 1 and 10 items per page)
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 10, type=int)

        # Query the database with pagination
        products = Product.query.paginate(page, per_page, False).items

        # Return products as JSON
        return jsonify([product.to_dict() for product in products]), 200

    except SQLAlchemyError as e:
        return jsonify({"error": "Database Error", "message": str(e)}), 500



@app.route('/api/products/<int:id>', methods=['GET'])
def get_product(id):
    try:
        # Find product by ID
        product = Product.query.get(id)

        # If product is not found, return 404 error
        if product is None:
            return jsonify({"error": "Not Found", "message": f"Product with ID {id} not found."}), 404

        # Return the product as JSON
        return jsonify(product.to_dict()), 200

    except SQLAlchemyError as e:
        return jsonify({"error": "Database Error", "message": str(e)}), 500




@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal Server Error", "message": "An unexpected error occurred."}), 500


@app.errorhandler(404)
def not_found_error(error):
    return jsonify({"error": "Not Found", "message": "The requested resource could not be found."}), 404




if __name__ == '__main__':
    app.run(debug=True)








product-ui/
  src/
    components/
      ProductList.js
      ProductDetail.js
      ProductCard.js
    api/
      api.js
    App.js
3. API Integration (api/api.js)
We'll centralize our API requests in api.js.

javascript
Copy
Edit
// src/api/api.js
import axios from 'axios';

const BASE_URL = 'http://127.0.0.1:5000/api/products'; // Adjust URL if necessary

export const fetchProducts = (page = 1, perPage = 10) => {
  return axios.get(BASE_URL, {
    params: { page, per_page: perPage },
  });
};

export const fetchProductById = (id) => {
  return axios.get(`${BASE_URL}/${id}`);
};
4. Product List View (ProductList.js)
This component will display all products in a grid or list format.

javascript
Copy
Edit
// src/components/ProductList.js
import React, { useState, useEffect } from 'react';
import { fetchProducts } from '../api/api';
import { Link } from 'react-router-dom';
import ProductCard from './ProductCard';

const ProductList = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);

  useEffect(() => {
    const getProducts = async () => {
      try {
        const response = await fetchProducts(page);
        setProducts(response.data.products);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    getProducts();
  }, [page]);

  const handleNextPage = () => setPage(page + 1);
  const handlePrevPage = () => setPage(page - 1);

  return (
    <div>
      <h1>Product List</h1>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <div className="product-grid">
          {products.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      )}
      <div>
        <button onClick={handlePrevPage} disabled={page === 1}>
          Previous
        </button>
        <button onClick={handleNextPage}>Next</button>
      </div>
    </div>
  );
};

export default ProductList;
ProductCard: This component is used for individual product display.

Pagination: Next and Previous buttons are included to navigate between pages of products.

5. Product Card (ProductCard.js)
We need a separate component to show individual product details in the list.

javascript
Copy
Edit
// src/components/ProductCard.js
import React from 'react';
import { Link } from 'react-router-dom';

const ProductCard = ({ product }) => {
  return (
    <div className="product-card">
      <h3>{product.name}</h3>
      <p>{product.description}</p>
      <p>${product.price}</p>
      <Link to={`/product/${product.id}`}>View Details</Link>
    </div>
  );
};

export default ProductCard;
This component displays the product's name, description, and price and includes a link to the Product Detail page.

6. Product Detail View (ProductDetail.js)
This component will display the details of an individual product when the user clicks "View Details".

javascript
Copy
Edit
// src/components/ProductDetail.js
import React, { useState, useEffect } from 'react';
import { fetchProductById } from '../api/api';
import { useParams } from 'react-router-dom';

const ProductDetail = () => {
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const { id } = useParams(); // Get product id from URL

  useEffect(() => {
    const getProduct = async () => {
      try {
        const response = await fetchProductById(id);
        setProduct(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching product:', error);
      }
    };
    getProduct();
  }, [id]);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>{product.name}</h1>
      <p>{product.description}</p>
      <p>Price: ${product.price}</p>
    </div>
  );
};

export default ProductDetail;




























# Initialize the database tables (use this once to create tables)#
#with app.app_context():
#    db.create_all()
